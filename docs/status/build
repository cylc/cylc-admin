#!/usr/bin/env python

"""Build the status page.

To test manually, you'll need to set up a "personal access token" with
read permissions. On CI we use `GITHUB_TOKEN`.

Usage:
  $ export GITHUB_TOKEN=<token>
  $ python build branches.json template.md.jinja2 status.md
  # then open the status.md file in a markdown viewer or convert to html e.g:
  $ npm install marked
  $ marked status.md -o status.html

"""

import argparse
import json
import os
from pathlib import Path
import urllib.request

from jinja2 import (
    Environment,
    StrictUndefined,
    FileSystemLoader,
)


def list_milestones(repo, per_page=100):
    _org, _repo = repo.split('/')
    url = (
        'https://api.github.com/repos/'
        f'{_org}/{_repo}/milestones?per_page={per_page}'
    )
    print(f'# {url}')
    req = urllib.request.Request(
        url,
        headers={
            'Authorization': f'Bearer {os.environ["GITHUB_TOKEN"]}',
        },
    )
    with urllib.request.urlopen(req) as f:
        milestones = json.loads(f.read().decode('utf-8'))
        return sorted(
            (milestone['title'], milestone['number'])
            for milestone in milestones
        )


def render(data_file, template_file, output_file):
    with open(template_file, 'r') as template_fh:
        template_code = template_fh.read()

    with open(data_file, 'r') as data_fh:
        data = json.load(data_fh)

    kwargs = {
        'loader': FileSystemLoader([Path(template_file).parent]),
        'undefined': StrictUndefined,
    }
    env = Environment(**kwargs)
    env.globals['list_milestones'] = list_milestones

    template = env.from_string(template_code)
    with open(output_file, 'w') as output_fh:
        output_fh.write(
            "<!-- This file is auto-generated, please do not edit it directly."
            "\n\n"
            "Please edit `branches.json` and raise a pull request, this file "
            "will be automatically regenerated on merge. -->\n"
        )
        output_fh.write(
            template.render(data)
        )


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('data')
    parser.add_argument('template')
    parser.add_argument('output')
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    render(args.data, args.template, args.output)
